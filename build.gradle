buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${project.version}-${project.mcVersion}"
group = project.group + '.' + project.modId
archivesBaseName = project.modId

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
    mavenLocal()

    maven { // JustEnoughItems
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {  // Patchouli
        url 'https://maven.blamejared.com'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcVersion}-${project.forgeVersion}"

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${project.patchouliVersion}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${project.patchouliVersion}")

    runtimeOnly fg.deobf("mezz.jei:jei-${project.jeiVersion}")
    compileOnly fg.deobf("mezz.jei:jei-${project.jeiVersion}:api")

    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${project.topVersion}")
}

processResources {
    inputs.property("version", version)
    inputs.property("modId", project.modId)
    inputs.property("name", project.name)
    inputs.property("author", project.author)
    inputs.property("mcVersion", mcVersion)
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': version, 'modId': project.modId, 'name': project.name, 'author': project.author, 'mcVersion': project.mcVersion
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "${archivesBaseName}",
            "Specification-Vendor": "${project.author}",
            "Specification-Version": "${project.version}",
            "Implementation-Title": "${project.name}",
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"${project.author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')